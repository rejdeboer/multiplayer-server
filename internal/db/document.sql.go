// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: document.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createDocument = `-- name: CreateDocument :one
INSERT INTO documents (name, owner_id)
    VALUES ($1, $2)
RETURNING id, name, owner_id, state_vector
`

type CreateDocumentParams struct {
	Name    string
	OwnerID uuid.UUID
}

func (q *Queries) CreateDocument(ctx context.Context, arg CreateDocumentParams) (Document, error) {
	row := q.db.QueryRow(ctx, createDocument, arg.Name, arg.OwnerID)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.StateVector,
	)
	return i, err
}

const deleteDocument = `-- name: DeleteDocument :exec
DELETE FROM documents 
WHERE id=$1
`

func (q *Queries) DeleteDocument(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteDocument, id)
	return err
}

const getDocumentWithContributorsByID = `-- name: GetDocumentWithContributorsByID :many
SELECT d.id as id, d.owner_id as owner_id, d.name as name,
    c.user_id as contributor_id
FROM documents d
JOIN document_contributors c on d.id = c.document_id
WHERE d.id = $1
`

type GetDocumentWithContributorsByIDRow struct {
	ID            uuid.UUID
	OwnerID       uuid.UUID
	Name          string
	ContributorID uuid.UUID
}

func (q *Queries) GetDocumentWithContributorsByID(ctx context.Context, id uuid.UUID) ([]GetDocumentWithContributorsByIDRow, error) {
	rows, err := q.db.Query(ctx, getDocumentWithContributorsByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDocumentWithContributorsByIDRow
	for rows.Next() {
		var i GetDocumentWithContributorsByIDRow
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.ContributorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDocumentsByOwnerID = `-- name: GetDocumentsByOwnerID :many
SELECT id, name, owner_id, state_vector FROM documents WHERE owner_id = $1
`

func (q *Queries) GetDocumentsByOwnerID(ctx context.Context, ownerID uuid.UUID) ([]Document, error) {
	rows, err := q.db.Query(ctx, getDocumentsByOwnerID, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Document
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OwnerID,
			&i.StateVector,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDocumnetByID = `-- name: GetDocumnetByID :one
SELECT id, name, owner_id, state_vector FROM documents WHERE id=$1
`

func (q *Queries) GetDocumnetByID(ctx context.Context, id uuid.UUID) (Document, error) {
	row := q.db.QueryRow(ctx, getDocumnetByID, id)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.StateVector,
	)
	return i, err
}
