// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: document_update.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createDocumentUpdate = `-- name: CreateDocumentUpdate :exec
INSERT INTO document_updates (document_id, clock, value)
    VALUES ($1, $2, $3)
`

type CreateDocumentUpdateParams struct {
	DocumentID uuid.UUID
	Clock      int32
	Value      []byte
}

func (q *Queries) CreateDocumentUpdate(ctx context.Context, arg CreateDocumentUpdateParams) error {
	_, err := q.db.Exec(ctx, createDocumentUpdate, arg.DocumentID, arg.Clock, arg.Value)
	return err
}

const getDocumentClock = `-- name: GetDocumentClock :one
SELECT COALESCE(MAX(clock), 0)
FROM document_updates
WHERE document_id = $1
`

func (q *Queries) GetDocumentClock(ctx context.Context, documentID uuid.UUID) (interface{}, error) {
	row := q.db.QueryRow(ctx, getDocumentClock, documentID)
	var coalesce interface{}
	err := row.Scan(&coalesce)
	return coalesce, err
}
