// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, username, passhash)
    VALUES ($1, $2, $3)
RETURNING id, email, username, passhash, image_url
`

type CreateUserParams struct {
	Email    string
	Username string
	Passhash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Username, arg.Passhash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Passhash,
		&i.ImageUrl,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, username, passhash, image_url FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Passhash,
		&i.ImageUrl,
	)
	return i, err
}

const updateUserImage = `-- name: UpdateUserImage :exec
UPDATE users
SET image_url=$2
WHERE id=$1
`

type UpdateUserImageParams struct {
	ID       uuid.UUID
	ImageUrl *string
}

func (q *Queries) UpdateUserImage(ctx context.Context, arg UpdateUserImageParams) error {
	_, err := q.db.Exec(ctx, updateUserImage, arg.ID, arg.ImageUrl)
	return err
}
